//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/psj/Scripts/Player Scripts/PlayerMovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMovement: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMovement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMovement"",
    ""maps"": [
        {
            ""name"": ""Player Move"",
            ""id"": ""ebd7965f-8a44-42de-80c0-df875f3f043b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bbd84c4f-c13e-4ef1-81c9-758efed2f054"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Value"",
                    ""id"": ""5ae27ce2-8ccf-4b85-b512-439dc38f0acb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""398f803d-fa46-4791-8817-6503c9df0e35"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6f20e9d0-bb94-461f-ad0e-956032eec5a6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4af11385-c9bc-4d0f-80b2-f2461228491a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c5901695-e9a0-4098-a9db-03b5062cfb45"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2609f9a9-4452-4b93-a7b9-147d565678e5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8d4a9758-add4-41cb-9b81-c13a5c399187"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Action"",
            ""id"": ""402d81ac-df03-455f-8588-5c438843c8cc"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""c7d8a9b8-1b05-4712-9439-e3912f5dbcd9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""ec9a5bae-6b5a-4b5b-b4b0-cf48636c5c95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""effdeed3-450f-4956-b365-b763d05d6168"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""23226e91-dbcc-48cf-90cc-58412e2decce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4558ef0c-6654-45ed-8b92-3eaa63c5e9d4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efe21e60-0119-4c3a-aacd-31d3a2b1bd9c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e934f28-725a-4301-965a-ba01dfa3c912"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa585c35-27fd-48a7-8b80-5f7766381dbf"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Weapon Swap"",
            ""id"": ""3dda5b09-7a59-43cc-8284-0049aa32694a"",
            ""actions"": [
                {
                    ""name"": ""SwordAndShield"",
                    ""type"": ""Button"",
                    ""id"": ""7df08787-9c74-4a10-80f0-ebe9c95178c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SingleTwoHandeSword"",
                    ""type"": ""Button"",
                    ""id"": ""739602bf-c589-4845-a6d5-09817df6102b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DoubleSwords"",
                    ""type"": ""Button"",
                    ""id"": ""bb934f83-d556-4244-bdcd-6ff9bc5c334d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BowAndArrow"",
                    ""type"": ""Button"",
                    ""id"": ""d5a56389-dce5-4d47-ab1a-1cba3391e543"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MagicWand"",
                    ""type"": ""Button"",
                    ""id"": ""79988e35-5e2c-4fc3-bb05-bb47f9c120fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""74d87cd7-da90-422d-a423-4e31a1b3fde9"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwordAndShield"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ec1c864-f27f-4e30-a18a-7e7360dfa288"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SingleTwoHandeSword"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2363e2d-e075-4629-86a8-17b99113b3c2"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoubleSwords"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0b572f0-19d9-445a-8ee1-98a4337c9391"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BowAndArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab406a17-a4c8-46ef-ac77-a3d4db731c25"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MagicWand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": []
        }
    ]
}");
        // Player Move
        m_PlayerMove = asset.FindActionMap("Player Move", throwIfNotFound: true);
        m_PlayerMove_Move = m_PlayerMove.FindAction("Move", throwIfNotFound: true);
        m_PlayerMove_Sprint = m_PlayerMove.FindAction("Sprint", throwIfNotFound: true);
        // Player Action
        m_PlayerAction = asset.FindActionMap("Player Action", throwIfNotFound: true);
        m_PlayerAction_Attack = m_PlayerAction.FindAction("Attack", throwIfNotFound: true);
        m_PlayerAction_Dash = m_PlayerAction.FindAction("Dash", throwIfNotFound: true);
        m_PlayerAction_Jump = m_PlayerAction.FindAction("Jump", throwIfNotFound: true);
        m_PlayerAction_Interaction = m_PlayerAction.FindAction("Interaction", throwIfNotFound: true);
        // Weapon Swap
        m_WeaponSwap = asset.FindActionMap("Weapon Swap", throwIfNotFound: true);
        m_WeaponSwap_SwordAndShield = m_WeaponSwap.FindAction("SwordAndShield", throwIfNotFound: true);
        m_WeaponSwap_SingleTwoHandeSword = m_WeaponSwap.FindAction("SingleTwoHandeSword", throwIfNotFound: true);
        m_WeaponSwap_DoubleSwords = m_WeaponSwap.FindAction("DoubleSwords", throwIfNotFound: true);
        m_WeaponSwap_BowAndArrow = m_WeaponSwap.FindAction("BowAndArrow", throwIfNotFound: true);
        m_WeaponSwap_MagicWand = m_WeaponSwap.FindAction("MagicWand", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Move
    private readonly InputActionMap m_PlayerMove;
    private List<IPlayerMoveActions> m_PlayerMoveActionsCallbackInterfaces = new List<IPlayerMoveActions>();
    private readonly InputAction m_PlayerMove_Move;
    private readonly InputAction m_PlayerMove_Sprint;
    public struct PlayerMoveActions
    {
        private @PlayerMovement m_Wrapper;
        public PlayerMoveActions(@PlayerMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMove_Move;
        public InputAction @Sprint => m_Wrapper.m_PlayerMove_Sprint;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMoveActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
        }

        private void UnregisterCallbacks(IPlayerMoveActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
        }

        public void RemoveCallbacks(IPlayerMoveActions instance)
        {
            if (m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMoveActions @PlayerMove => new PlayerMoveActions(this);

    // Player Action
    private readonly InputActionMap m_PlayerAction;
    private List<IPlayerActionActions> m_PlayerActionActionsCallbackInterfaces = new List<IPlayerActionActions>();
    private readonly InputAction m_PlayerAction_Attack;
    private readonly InputAction m_PlayerAction_Dash;
    private readonly InputAction m_PlayerAction_Jump;
    private readonly InputAction m_PlayerAction_Interaction;
    public struct PlayerActionActions
    {
        private @PlayerMovement m_Wrapper;
        public PlayerActionActions(@PlayerMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_PlayerAction_Attack;
        public InputAction @Dash => m_Wrapper.m_PlayerAction_Dash;
        public InputAction @Jump => m_Wrapper.m_PlayerAction_Jump;
        public InputAction @Interaction => m_Wrapper.m_PlayerAction_Interaction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
        }

        private void UnregisterCallbacks(IPlayerActionActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
        }

        public void RemoveCallbacks(IPlayerActionActions instance)
        {
            if (m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionActions @PlayerAction => new PlayerActionActions(this);

    // Weapon Swap
    private readonly InputActionMap m_WeaponSwap;
    private List<IWeaponSwapActions> m_WeaponSwapActionsCallbackInterfaces = new List<IWeaponSwapActions>();
    private readonly InputAction m_WeaponSwap_SwordAndShield;
    private readonly InputAction m_WeaponSwap_SingleTwoHandeSword;
    private readonly InputAction m_WeaponSwap_DoubleSwords;
    private readonly InputAction m_WeaponSwap_BowAndArrow;
    private readonly InputAction m_WeaponSwap_MagicWand;
    public struct WeaponSwapActions
    {
        private @PlayerMovement m_Wrapper;
        public WeaponSwapActions(@PlayerMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwordAndShield => m_Wrapper.m_WeaponSwap_SwordAndShield;
        public InputAction @SingleTwoHandeSword => m_Wrapper.m_WeaponSwap_SingleTwoHandeSword;
        public InputAction @DoubleSwords => m_Wrapper.m_WeaponSwap_DoubleSwords;
        public InputAction @BowAndArrow => m_Wrapper.m_WeaponSwap_BowAndArrow;
        public InputAction @MagicWand => m_Wrapper.m_WeaponSwap_MagicWand;
        public InputActionMap Get() { return m_Wrapper.m_WeaponSwap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponSwapActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponSwapActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponSwapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponSwapActionsCallbackInterfaces.Add(instance);
            @SwordAndShield.started += instance.OnSwordAndShield;
            @SwordAndShield.performed += instance.OnSwordAndShield;
            @SwordAndShield.canceled += instance.OnSwordAndShield;
            @SingleTwoHandeSword.started += instance.OnSingleTwoHandeSword;
            @SingleTwoHandeSword.performed += instance.OnSingleTwoHandeSword;
            @SingleTwoHandeSword.canceled += instance.OnSingleTwoHandeSword;
            @DoubleSwords.started += instance.OnDoubleSwords;
            @DoubleSwords.performed += instance.OnDoubleSwords;
            @DoubleSwords.canceled += instance.OnDoubleSwords;
            @BowAndArrow.started += instance.OnBowAndArrow;
            @BowAndArrow.performed += instance.OnBowAndArrow;
            @BowAndArrow.canceled += instance.OnBowAndArrow;
            @MagicWand.started += instance.OnMagicWand;
            @MagicWand.performed += instance.OnMagicWand;
            @MagicWand.canceled += instance.OnMagicWand;
        }

        private void UnregisterCallbacks(IWeaponSwapActions instance)
        {
            @SwordAndShield.started -= instance.OnSwordAndShield;
            @SwordAndShield.performed -= instance.OnSwordAndShield;
            @SwordAndShield.canceled -= instance.OnSwordAndShield;
            @SingleTwoHandeSword.started -= instance.OnSingleTwoHandeSword;
            @SingleTwoHandeSword.performed -= instance.OnSingleTwoHandeSword;
            @SingleTwoHandeSword.canceled -= instance.OnSingleTwoHandeSword;
            @DoubleSwords.started -= instance.OnDoubleSwords;
            @DoubleSwords.performed -= instance.OnDoubleSwords;
            @DoubleSwords.canceled -= instance.OnDoubleSwords;
            @BowAndArrow.started -= instance.OnBowAndArrow;
            @BowAndArrow.performed -= instance.OnBowAndArrow;
            @BowAndArrow.canceled -= instance.OnBowAndArrow;
            @MagicWand.started -= instance.OnMagicWand;
            @MagicWand.performed -= instance.OnMagicWand;
            @MagicWand.canceled -= instance.OnMagicWand;
        }

        public void RemoveCallbacks(IWeaponSwapActions instance)
        {
            if (m_Wrapper.m_WeaponSwapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponSwapActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponSwapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponSwapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponSwapActions @WeaponSwap => new WeaponSwapActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IPlayerMoveActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
    public interface IPlayerActionActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
    }
    public interface IWeaponSwapActions
    {
        void OnSwordAndShield(InputAction.CallbackContext context);
        void OnSingleTwoHandeSword(InputAction.CallbackContext context);
        void OnDoubleSwords(InputAction.CallbackContext context);
        void OnBowAndArrow(InputAction.CallbackContext context);
        void OnMagicWand(InputAction.CallbackContext context);
    }
}
